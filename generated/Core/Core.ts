// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenAddedToTrade extends ethereum.Event {
  get params(): TokenAddedToTrade__Params {
    return new TokenAddedToTrade__Params(this);
  }
}

export class TokenAddedToTrade__Params {
  _event: TokenAddedToTrade;

  constructor(event: TokenAddedToTrade) {
    this._event = event;
  }

  get _tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _cell(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokenRemovedFromTrade extends ethereum.Event {
  get params(): TokenRemovedFromTrade__Params {
    return new TokenRemovedFromTrade__Params(this);
  }
}

export class TokenRemovedFromTrade__Params {
  _event: TokenRemovedFromTrade;

  constructor(event: TokenRemovedFromTrade) {
    this._event = event;
  }

  get _tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _cell(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TradeExtended extends ethereum.Event {
  get params(): TradeExtended__Params {
    return new TradeExtended__Params(this);
  }
}

export class TradeExtended__Params {
  _event: TradeExtended;

  constructor(event: TradeExtended) {
    this._event = event;
  }

  get _tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TradeFinalized extends ethereum.Event {
  get params(): TradeFinalized__Params {
    return new TradeFinalized__Params(this);
  }
}

export class TradeFinalized__Params {
  _event: TradeFinalized;

  constructor(event: TradeFinalized) {
    this._event = event;
  }

  get _tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TradeStarted extends ethereum.Event {
  get params(): TradeStarted__Params {
    return new TradeStarted__Params(this);
  }
}

export class TradeStarted__Params {
  _event: TradeStarted;

  constructor(event: TradeStarted) {
    this._event = event;
  }

  get _tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _starter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _receiver(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _starterContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get _receiverContract(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class UserTradeStateChange extends ethereum.Event {
  get params(): UserTradeStateChange__Params {
    return new UserTradeStateChange__Params(this);
  }
}

export class UserTradeStateChange__Params {
  _event: UserTradeStateChange;

  constructor(event: UserTradeStateChange) {
    this._event = event;
  }

  get _tradeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get _user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _isReady(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Core__getTradeResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: BigInt;
  value5: i32;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: BigInt,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }
}

export class Core extends ethereum.SmartContract {
  static bind(address: Address): Core {
    return new Core("Core", address);
  }

  getTrade(_tradeId: Bytes): Core__getTradeResult {
    let result = super.call(
      "getTrade",
      "getTrade(bytes32):(address,address,address,address,uint256,uint8)",
      [ethereum.Value.fromFixedBytes(_tradeId)]
    );

    return new Core__getTradeResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toI32()
    );
  }

  try_getTrade(_tradeId: Bytes): ethereum.CallResult<Core__getTradeResult> {
    let result = super.tryCall(
      "getTrade",
      "getTrade(bytes32):(address,address,address,address,uint256,uint8)",
      [ethereum.Value.fromFixedBytes(_tradeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__getTradeResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toI32()
      )
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class AddTokenToTradeCall extends ethereum.Call {
  get inputs(): AddTokenToTradeCall__Inputs {
    return new AddTokenToTradeCall__Inputs(this);
  }

  get outputs(): AddTokenToTradeCall__Outputs {
    return new AddTokenToTradeCall__Outputs(this);
  }
}

export class AddTokenToTradeCall__Inputs {
  _call: AddTokenToTradeCall;

  constructor(call: AddTokenToTradeCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _cell(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class AddTokenToTradeCall__Outputs {
  _call: AddTokenToTradeCall;

  constructor(call: AddTokenToTradeCall) {
    this._call = call;
  }
}

export class ChangeUserReadinessCall extends ethereum.Call {
  get inputs(): ChangeUserReadinessCall__Inputs {
    return new ChangeUserReadinessCall__Inputs(this);
  }

  get outputs(): ChangeUserReadinessCall__Outputs {
    return new ChangeUserReadinessCall__Outputs(this);
  }
}

export class ChangeUserReadinessCall__Inputs {
  _call: ChangeUserReadinessCall;

  constructor(call: ChangeUserReadinessCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class ChangeUserReadinessCall__Outputs {
  _call: ChangeUserReadinessCall;

  constructor(call: ChangeUserReadinessCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveTokenFromTradeCall extends ethereum.Call {
  get inputs(): RemoveTokenFromTradeCall__Inputs {
    return new RemoveTokenFromTradeCall__Inputs(this);
  }

  get outputs(): RemoveTokenFromTradeCall__Outputs {
    return new RemoveTokenFromTradeCall__Outputs(this);
  }
}

export class RemoveTokenFromTradeCall__Inputs {
  _call: RemoveTokenFromTradeCall;

  constructor(call: RemoveTokenFromTradeCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _cell(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveTokenFromTradeCall__Outputs {
  _call: RemoveTokenFromTradeCall;

  constructor(call: RemoveTokenFromTradeCall) {
    this._call = call;
  }
}

export class StartTradeCall extends ethereum.Call {
  get inputs(): StartTradeCall__Inputs {
    return new StartTradeCall__Inputs(this);
  }

  get outputs(): StartTradeCall__Outputs {
    return new StartTradeCall__Outputs(this);
  }
}

export class StartTradeCall__Inputs {
  _call: StartTradeCall;

  constructor(call: StartTradeCall) {
    this._call = call;
  }

  get _tradeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _starter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _receiver(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _starterContractAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _receiverContractAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _amountOfCells(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class StartTradeCall__Outputs {
  _call: StartTradeCall;

  constructor(call: StartTradeCall) {
    this._call = call;
  }
}
